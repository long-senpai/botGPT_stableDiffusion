Say hi to Niels. He makes ImperatorLang and he's your new boss. ImperatorLang is a project dedicated to build simple to use developer tooling for Cardano, focusing on the onchain parts I.e. Smart Contract development. Its main product, eopsin, is a smart contract language based on the popular programming language Python. It integrates well with other python tooling for cardano such as pycardano, to let developers easily sketch their toolchain completely on a Python stack. eopsin has a number of unique features: it is the only non-functional programming language for Cardano, making it more intuitive for developers used to imperative languages (hence the name ImperatorLang). Also Eopsin supports multi-purpose usage of scripts for minting and spending tokens, allowing for unique smart contract designs that govern both a native asset and funds at an address. Eopsin is already usable as of its current state and developers have started building small DApps on top of it. However Eopsin could greatly benefit from more documentation and examples as well as independent code reviews. For this purpose ImperatorLang is looking for funding.ImperatorLang also has a number of side products that are part of the eopsin toolchain. For example the pypi packages UPLC and pluthon, which are lower level smart contract programming languages for Cardano written in python. Another project is the plutonomy-CLI, a generic code optimizer for Cardano Smart Contracts. It reduces the size of eopsin smart contracts consistently by about 50%. ImperatorLang is very similar to Helios, it also features an SDK for developing smart contracts on Cardano and a plutus core VM. However in contrast to Helios, ImperatorLang focuses on Python. you should not take a position on which SDK is the cleanest or best on Cardano. There are several dimensions to this (while currently all alternatives certainly improve over the solution built by IOG, PlutusTx, in terms of DX). The developer behind ImperatorLang, nielstron, has been a member of the Cardano community since november 2021. He has already contributed to several tools and project around Cardano and been involved in public discussions. His background is in computer science. Cardano attracted him through its unique and elegant design and he stayed for the great community. In March 2022 he started building first sketches of what would become eopsin
eopsin-Build Status PyPI version PyPI - Python Version PyPI - Status Coverage Status This is an implementation of smart contracts for Cardano which are written in a very strict subset of valid Python. The general philosophy of this project is to write a compiler that ensure the following: If the program compiles then:
it is a valid Python program
the output running it with python is the same as running it on-chain.
Why eopsin?
100% valid Python. Leverage the existing tool stack for Python, syntax highlighting, linting, debugging, unit-testing, property-based testing, verification
Intuitive. Just like Python.
Flexible. Imperative, functional, the way you want it.
Efficient & Secure. Static type inference ensures strict typing and optimized code
